Given a singly linked list, determine if it is a palindrome.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        
        l1 = l2 = head
        
        if not l1:
            return True
        
        n = 1
        while l1.next:
            l1 = l1.next
            n += 1
        
        if n == 2:
            if head.next.val == head.val:
                return True
            return False
        
        if n == 3:
            if head.next.next.val == head.val:
                return True
            return False
        
        
        l1 = head
        mid = n//2
        prev = None
        next = l1.next
        # pointer to middle node

        for _ in range(mid + (n%2)):
            l2 = l2.next
        
        for _ in range(mid-1):
            
            l1.next = prev
            prev = l1
            l1 = next

            next = l1.next

        l1.next = prev
              
        while l1 and l2:
            if l1.val != l2.val:
                return False
            l1 = l1.next
            l2 = l2.next
            
        return True
        
    
            
            
            
# 1 -> 2 -> 3 -> 2 -> 2 -> 4
