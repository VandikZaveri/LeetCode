In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.


class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        
        count = -1
        minutes = 0
        adj = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]
        
        while count != 0:
            
            count = 0
            for i in range(grid):
                for j in range(grid[0]):
                    adj[i][j] = grid[i][j]
            
            fresh = 0
            for i, row in enumerate(grid, 0):
                
                for j in range(len(row)):
                    
                    if grid[i][j] == 1:
                        fresh += 1
                    
                    elif grid[i][j] == 2:
                        adj[i][j] = 3
                    
                        moves = [[min(len(grid) - 1, i + 1),j], [max(0, i - 1), j], [i, min(len(row) - 1, j + 1)], [i, max(0, j - 1)]]
                        
                        for x, y in moves:
                            
                            if grid[x][y] == 1:
                                count += 1
                                adj[x][y] = 2
                
            if fresh == 0:
                print(grid)
                print(adj)
                return minutes
                
            minutes += 1
                
            grid = adj.copy()
        return -1
        
