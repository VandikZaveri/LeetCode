We have jobs: difficulty[i] is the difficulty of the ith job, and profit[i] is the profit of the ith job. 

Now we have some workers. worker[i] is the ability of the ith worker, which means that this worker can only complete a job with difficulty at most worker[i]. 

Every worker can be assigned at most one job, but one job can be completed multiple times.

For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.

What is the most profit we can make?


class Solution:
    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:
        
        jobs = zip(difficulty, profit)
     
        
        
        jobs = sorted(jobs, key = lambda x: -x[1])
     
        worker.sort(reverse = True)  
        
        idx = 0
        cash = 0
        for man in worker:
            start = idx
            for i in range(start, len(jobs)):
                
                if jobs[i][0] <= man:
                    cash += jobs[i][1]
                   
                    start = idx 
                    
                    break
                #print(cash)
                idx += 1
        
        return cash
        
        
