Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?


class Node:
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None
        
    def __str__(self):
        print(self.key, '\t', self.val)

class LRUCache:

    def __init__(self, capacity: int):
        self.map = {}
        self.cap = capacity
        self.size = 0
        self.head = Node('h', 'h')
        self.tail = Node('t', 't')
        self.head.next = self.tail
        self.tail.prev = self.head
        

    def get(self, key: int) -> int:
        
        if key not in self.map:
            return -1
            
        curr = self.map[key]
        val = curr.val
        curr.next.prev = curr.prev
        curr.prev.next = curr.next
        
        
        node = Node(key, val)
        self.head.next.prev = node
        node.next = self.head.next
        node.prev = self.head
        self.head.next = node
        self.map[key] = node
  
    
    
        return val
    
    
    def put(self, key: int, value: int) -> None:
        
        if key in self.map:
            node = self.map[key]
            node.prev.next = node.next
            node.next.prev = node.prev
            self.size -= 1
            
        
        
        node = Node(key, value)
        self.map[key] = node
        self.head.next.prev = node
        node.next = self.head.next
        node.prev = self.head
        self.head.next = node    
        self.size += 1
      #  print(self.map[key])
        
        if self.size > self.cap:
            old_key = self.tail.prev.key
            self.tail.prev = self.tail.prev.prev
            self.tail.prev.next = self.tail
            self.size -=1

            del self.map[old_key]

        
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
