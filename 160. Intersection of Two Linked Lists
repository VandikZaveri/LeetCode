# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        
        lenA = 0
        lenB = 0
        
        pA = headA
        pB = headB
        
        while pA:
            pA = pA.next
            lenA += 1
        
        while pB:
            pB = pB.next
            lenB += 1
        
        diff = abs(lenA - lenB)
        if lenA >= lenB:
            for i in range(diff):
                headA = headA.next
        else:
            for i in range(diff):
                headB = headB.next
                
        while headA and headB:
            if headA == headB:
                return headA
            headA = headA.next
            headB = headB.next

        return 
            
        
        
#alternate method        
def getIntersectionNodess(self, headA: ListNode, headB: ListNode) -> ListNode:
        
        nodes = set()
        
        while headA:
            nodes.add(headA)
            headA = headA.next
            
        while headB:
            if headB in nodes:
                return headB
            headB = headB.next
            
        return
        
 
