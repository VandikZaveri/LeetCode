Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].


class Solution:
    def __init__(self):
        self.prev = -1
        self.mid = -1
        
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        
        def binarySearch(lo, hi,  nums, target, left):
           
            if lo > hi:
                return self.prev
            
            mid = int((lo + hi)//2)
            
            if nums[mid] == target:
                if self.mid == -1:
                    self.mid = mid
                self.prev = mid
                if left:
                    return binarySearch(lo, mid - 1, nums, target, left)
                
                else:
                    return binarySearch(mid + 1, hi, nums, target, left)
            
            if nums[mid] > target:
                hi = mid-1
                
            else:
                lo = mid + 1
                
            return binarySearch(lo, hi, nums, target, left)
        
        self.prev = -1
        start = binarySearch(0, len(nums) - 1, nums, target, True)
        
        if start == -1:
            return [-1, -1]
        
        self.prev = self.mid
        end = binarySearch(self.mid + 1, len(nums) - 1, nums, target, False)
        
        return [start , end ]
