Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def __init__(self):
        self.key = None
        self.right = 0
        self.left = 0
    
    def search(self, node, p, q):
        found = 0
        if node is None:
            return 0
        
        if node == p or node == q:
            found += 1
        
        
        found += self.search(node.left, p, q)
        
        if found == 2:
            self.key = node
            return -2
        
        found += self.search(node.right, p, q)
        
        
        if found == 2:
            self.key = node
            return -2
        
        return found
    
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.search(root, p, q)
        return self.key
    
