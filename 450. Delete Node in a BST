Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
        
    def getSmallestAndDelete(self, node, prev):
        while node.left:
            prev = node
            node = node.left
        
        if prev.left == node:
            prev.left = node.right
            
        else:
            prev.right = node.right
            
        return node.val
        
        
    
    def delete(self, node, val):
        
        if node is None:
            self.flag = 1
            return None
        
        if node.val > val:
            node.left = self.delete(node.left, val)
            
        elif node.val < val:
            node.right = self.delete(node.right, val)
            
        else:
            if node.right is None and node.left is None:
                return None
            
            elif node.right is None or node.left is None:
                if node.right:
                    return node.right
                else:
                    return node.left
                
            else:
                node.val = self.getSmallestAndDelete(node.right, node)
                return node
            
        return node
    
    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:
       
        return self.delete(root, key)
        
        
